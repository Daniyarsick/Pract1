#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏–∑ –ª—É—á—à–∏—Ö –∏ —Ö—É–¥—à–∏—Ö –≤–∏–Ω –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–º–µ—Ä–æ–≤
"""

import pandas as pd
import numpy as np
import joblib
from datetime import datetime

def load_data():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –≤–∏–Ω–∞—Ö"""
    print("üìä –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –∫—Ä–∞—Å–Ω—ã—Ö –≤–∏–Ω
    red_wine = pd.read_csv('data/winequality-red.csv', delimiter=';')
    red_wine['wine_type_red'] = 1
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –±–µ–ª—ã—Ö –≤–∏–Ω
    white_wine = pd.read_csv('data/winequality-white.csv', delimiter=';')
    white_wine['wine_type_red'] = 0
    
    # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    wine_data = pd.concat([red_wine, white_wine], ignore_index=True)
    
    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π –∫–æ–ª–æ–Ω–æ–∫
    wine_data.columns = [col.replace(' ', '_').lower() for col in wine_data.columns]
    
    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(wine_data)} –æ–±—Ä–∞–∑—Ü–æ–≤ –≤–∏–Ω")
    print(f"üìà –î–∏–∞–ø–∞–∑–æ–Ω –∫–∞—á–µ—Å—Ç–≤–∞: {wine_data['quality'].min()} - {wine_data['quality'].max()}")
    
    return wine_data

def analyze_quality_extremes(wine_data):
    """–ê–Ω–∞–ª–∏–∑ –∫—Ä–∞–π–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π –∫–∞—á–µ—Å—Ç–≤–∞"""
    print("\nüîç –ê–Ω–∞–ª–∏–∑ –∫—Ä–∞–π–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π –∫–∞—á–µ—Å—Ç–≤–∞:")
    
    # –õ—É—á—à–∏–µ –≤–∏–Ω–∞ (8-9 –±–∞–ª–ª–æ–≤)
    best_wines = wine_data[wine_data['quality'] >= 8]
    print(f"üèÜ –í—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –≤–∏–Ω–∞ (8-9 –±–∞–ª–ª–æ–≤): {len(best_wines)} –æ–±—Ä–∞–∑—Ü–æ–≤")
    
    # –•—É–¥—à–∏–µ –≤–∏–Ω–∞ (3-4 –±–∞–ª–ª–∞)
    worst_wines = wine_data[wine_data['quality'] <= 4]
    print(f"üíî –ù–∏–∑–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –≤–∏–Ω–∞ (3-4 –±–∞–ª–ª–∞): {len(worst_wines)} –æ–±—Ä–∞–∑—Ü–æ–≤")
    
    # –°—Ä–µ–¥–Ω–∏–µ –≤–∏–Ω–∞ (5-6 –±–∞–ª–ª–æ–≤)
    average_wines = wine_data[(wine_data['quality'] >= 5) & (wine_data['quality'] <= 6)]
    print(f"‚öñÔ∏è –°—Ä–µ–¥–Ω–∏–µ –≤–∏–Ω–∞ (5-6 –±–∞–ª–ª–æ–≤): {len(average_wines)} –æ–±—Ä–∞–∑—Ü–æ–≤")
    
    return best_wines, worst_wines, average_wines

def get_feature_statistics(best_wines, worst_wines, average_wines):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –ø—Ä–∏–∑–Ω–∞–∫–∞–º"""
    print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –ø–æ –≥—Ä—É–ø–ø–∞–º –∫–∞—á–µ—Å—Ç–≤–∞:")
    
    feature_cols = ['fixed_acidity', 'volatile_acidity', 'citric_acid', 'residual_sugar',
                   'chlorides', 'free_sulfur_dioxide', 'total_sulfur_dioxide', 
                   'density', 'ph', 'sulphates', 'alcohol']
    
    stats = {}
    for group_name, group_data in [("–õ—É—á—à–∏–µ", best_wines), ("–•—É–¥—à–∏–µ", worst_wines), ("–°—Ä–µ–¥–Ω–∏–µ", average_wines)]:
        stats[group_name] = group_data[feature_cols].mean()
    
    stats_df = pd.DataFrame(stats)
    print(stats_df.round(3))
    
    return stats_df

def create_wine_examples(stats_df, wine_data):
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–æ–≤ –≤–∏–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    print("\nüç∑ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–æ–≤ –≤–∏–Ω...")
    
    # –ü—Ä–∏–º–µ—Ä –ª—É—á—à–µ–≥–æ –∫—Ä–∞—Å–Ω–æ–≥–æ –≤–∏–Ω–∞ (–Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ä–µ–¥–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π –ª—É—á—à–∏—Ö –≤–∏–Ω)
    best_red_wine = {
        'fixed_acidity': round(stats_df.loc['fixed_acidity', '–õ—É—á—à–∏–µ'], 1),
        'volatile_acidity': round(stats_df.loc['volatile_acidity', '–õ—É—á—à–∏–µ'], 2),
        'citric_acid': round(stats_df.loc['citric_acid', '–õ—É—á—à–∏–µ'], 2),
        'residual_sugar': round(stats_df.loc['residual_sugar', '–õ—É—á—à–∏–µ'], 1),
        'chlorides': round(stats_df.loc['chlorides', '–õ—É—á—à–∏–µ'], 3),
        'free_sulfur_dioxide': round(stats_df.loc['free_sulfur_dioxide', '–õ—É—á—à–∏–µ']),
        'total_sulfur_dioxide': round(stats_df.loc['total_sulfur_dioxide', '–õ—É—á—à–∏–µ']),
        'density': round(stats_df.loc['density', '–õ—É—á—à–∏–µ'], 4),
        'pH': round(stats_df.loc['ph', '–õ—É—á—à–∏–µ'], 2),
        'sulphates': round(stats_df.loc['sulphates', '–õ—É—á—à–∏–µ'], 2),
        'alcohol': round(stats_df.loc['alcohol', '–õ—É—á—à–∏–µ'], 1),
        'wine_type_red': 1
    }
    
    # –ü—Ä–∏–º–µ—Ä –ª—É—á—à–µ–≥–æ –±–µ–ª–æ–≥–æ –≤–∏–Ω–∞
    best_white_wine = best_red_wine.copy()
    best_white_wine['wine_type_red'] = 0
    # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –¥–ª—è –±–µ–ª–æ–≥–æ –≤–∏–Ω–∞
    best_white_wine['volatile_acidity'] = 0.25  # –ë–µ–ª—ã–µ –≤–∏–Ω–∞ –æ–±—ã—á–Ω–æ –∏–º–µ—é—Ç –º–µ–Ω—å—à–µ –ª–µ—Ç—É—á–µ–π –∫–∏—Å–ª–æ—Ç–Ω–æ—Å—Ç–∏
    best_white_wine['residual_sugar'] = 6.5     # –ë–µ–ª—ã–µ –≤–∏–Ω–∞ —á–∞—Å—Ç–æ –±–æ–ª–µ–µ —Å–ª–∞–¥–∫–∏–µ
    best_white_wine['free_sulfur_dioxide'] = 35 # –ë–æ–ª—å—à–µ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ SO2
    best_white_wine['total_sulfur_dioxide'] = 140
    
    # –ü—Ä–∏–º–µ—Ä —Ö—É–¥—à–µ–≥–æ –∫—Ä–∞—Å–Ω–æ–≥–æ –≤–∏–Ω–∞
    worst_red_wine = {
        'fixed_acidity': round(stats_df.loc['fixed_acidity', '–•—É–¥—à–∏–µ'], 1),
        'volatile_acidity': round(stats_df.loc['volatile_acidity', '–•—É–¥—à–∏–µ'], 2),
        'citric_acid': round(stats_df.loc['citric_acid', '–•—É–¥—à–∏–µ'], 2),
        'residual_sugar': round(stats_df.loc['residual_sugar', '–•—É–¥—à–∏–µ'], 1),
        'chlorides': round(stats_df.loc['chlorides', '–•—É–¥—à–∏–µ'], 3),
        'free_sulfur_dioxide': round(stats_df.loc['free_sulfur_dioxide', '–•—É–¥—à–∏–µ']),
        'total_sulfur_dioxide': round(stats_df.loc['total_sulfur_dioxide', '–•—É–¥—à–∏–µ']),
        'density': round(stats_df.loc['density', '–•—É–¥—à–∏–µ'], 4),
        'pH': round(stats_df.loc['ph', '–•—É–¥—à–∏–µ'], 2),
        'sulphates': round(stats_df.loc['sulphates', '–•—É–¥—à–∏–µ'], 2),
        'alcohol': round(stats_df.loc['alcohol', '–•—É–¥—à–∏–µ'], 1),
        'wine_type_red': 1
    }
    
    # –ü—Ä–∏–º–µ—Ä —Ö—É–¥—à–µ–≥–æ –±–µ–ª–æ–≥–æ –≤–∏–Ω–∞
    worst_white_wine = worst_red_wine.copy()
    worst_white_wine['wine_type_red'] = 0
    # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –¥–ª—è –±–µ–ª–æ–≥–æ –≤–∏–Ω–∞
    worst_white_wine['volatile_acidity'] = 0.35
    worst_white_wine['residual_sugar'] = 12.0
    worst_white_wine['free_sulfur_dioxide'] = 25
    worst_white_wine['total_sulfur_dioxide'] = 180
    
    return {
        'best_red': best_red_wine,
        'best_white': best_white_wine,
        'worst_red': worst_red_wine,
        'worst_white': worst_white_wine
    }

def test_predictions(examples):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –º–æ–¥–µ–ª–∏ –¥–ª—è –ø—Ä–∏–º–µ—Ä–æ–≤"""
    print("\nüîÆ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –º–æ–¥–µ–ª–∏...")
    
    try:
        # –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –∏ —Å–∫–µ–π–ª–µ—Ä–∞
        model = joblib.load('models/best_wine_model.pkl')
        scaler = joblib.load('models/scaler.pkl')
        print("‚úÖ –ú–æ–¥–µ–ª—å –∏ —Å–∫–µ–π–ª–µ—Ä –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        
        results = {}
        
        for wine_type, wine_data in examples.items():
            print(f"\nüç∑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {wine_type.replace('_', ' ').title()}")
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
            features = [
                wine_data['fixed_acidity'], wine_data['volatile_acidity'], 
                wine_data['citric_acid'], wine_data['residual_sugar'],
                wine_data['chlorides'], wine_data['free_sulfur_dioxide'],
                wine_data['total_sulfur_dioxide'], wine_data['density'],
                wine_data['pH'], wine_data['sulphates'], wine_data['alcohol'],
                wine_data['wine_type_red']
            ]
            
            # –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
            features_scaled = scaler.transform([features])
            
            # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
            prediction = model.predict(features_scaled)[0]
            probabilities = model.predict_proba(features_scaled)[0]
            confidence = max(probabilities)
            
            results[wine_type] = {
                'prediction': int(prediction),
                'confidence': float(confidence),
                'probabilities': {str(i+3): float(prob) for i, prob in enumerate(probabilities)}
            }
            
            print(f"   üìä –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ: {prediction} –±–∞–ª–ª–æ–≤")
            print(f"   üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.3f}")
            print(f"   üìà –¢–æ–ø-3 –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏:")
            
            # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π
            sorted_probs = sorted(results[wine_type]['probabilities'].items(), 
                                key=lambda x: x[1], reverse=True)[:3]
            for quality, prob in sorted_probs:
                if prob > 0.01:
                    print(f"      –ö–∞—á–µ—Å—Ç–≤–æ {quality}: {prob:.3f}")
        
        return results
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –º–æ–¥–µ–ª–∏: {e}")
        return {}

def create_api_test_commands(examples):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API"""
    print("\nüîó –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API:")
    
    for wine_type, wine_data in examples.items():
        print(f"\n# {wine_type.replace('_', ' ').title()}")
        print("curl -X POST http://localhost:5000/api/predict \\")
        print("  -H \"Content-Type: application/json\" \\")
        print("  -d '{")
        for key, value in wine_data.items():
            print(f'    "{key}": {value},')
        print("  }' | jq")

def save_examples_to_file(examples, results):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–æ–≤ –≤ —Ñ–∞–π–ª"""
    print("\nüíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–æ–≤...")
    
    import json
    
    output = {
        'timestamp': datetime.now().isoformat(),
        'examples': examples,
        'predictions': results,
        'description': '–ü—Ä–∏–º–µ—Ä—ã –ª—É—á—à–∏—Ö –∏ —Ö—É–¥—à–∏—Ö –≤–∏–Ω –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏'
    }
    
    with open('wine_examples.json', 'w', encoding='utf-8') as f:
        json.dump(output, f, indent=2, ensure_ascii=False)
    
    print("‚úÖ –ü—Ä–∏–º–µ—Ä—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ wine_examples.json")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üç∑ –ê–ù–ê–õ–ò–ó –õ–£–ß–®–ò–• –ò –•–£–î–®–ò–• –í–ò–ù")
    print("=" * 50)
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    wine_data = load_data()
    
    # –ê–Ω–∞–ª–∏–∑ –∫—Ä–∞–π–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    best_wines, worst_wines, average_wines = analyze_quality_extremes(wine_data)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
    stats_df = get_feature_statistics(best_wines, worst_wines, average_wines)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–æ–≤
    examples = create_wine_examples(stats_df, wine_data)
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
    results = test_predictions(examples)
    
    # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è API
    create_api_test_commands(examples)
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    save_examples_to_file(examples, results)
    
    print("\n" + "=" * 50)
    print("‚ú® –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω! –ü—Ä–∏–º–µ—Ä—ã –≥–æ—Ç–æ–≤—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")

if __name__ == "__main__":
    main()
