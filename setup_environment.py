"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ Wine Quality ML
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –≤–µ—Ä—Å–∏—é Python –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ –ø–∞–∫–µ—Ç—ã
"""

import sys
import subprocess
import pkg_resources
from pathlib import Path

def check_python_version():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python –∏ –≤—ã–≤–æ–¥ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"""
    version = sys.version_info
    print(f"–í–µ—Ä—Å–∏—è Python: {version.major}.{version.minor}.{version.micro}")
    
    if version >= (3, 13):
        print("‚ö†Ô∏è  Python 3.13+ –æ–±–Ω–∞—Ä—É–∂–µ–Ω. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø–∞–∫–µ—Ç—ã –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º—ã.")
        print("–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Python 3.9-3.11 –¥–ª—è –ø–æ–ª–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏.")
        return "3.13+"
    elif version >= (3, 9):
        print("‚úÖ –°–æ–≤–º–µ—Å—Ç–∏–º–∞—è –≤–µ—Ä—Å–∏—è Python –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞.")
        return "compatible"
    else:
        print("‚ùå Python –≤–µ—Ä—Å–∏–∏ 3.9+ —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞.")
        return "too_old"

def install_package_safe(package_name, fallback_version=None):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞–∫–µ—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        print(f"–£—Å—Ç–∞–Ω–æ–≤–∫–∞ {package_name}...")
        subprocess.check_call([sys.executable, "-m", "pip", "install", package_name])
        print(f"‚úÖ {package_name} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ {package_name}: {e}")
        if fallback_version:
            try:
                print(f"–ü–æ–ø—ã—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–π –≤–µ—Ä—Å–∏–∏: {fallback_version}")
                subprocess.check_call([sys.executable, "-m", "pip", "install", fallback_version])
                print(f"‚úÖ {fallback_version} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                return True
            except subprocess.CalledProcessError:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å {fallback_version}")
        return False

def install_essential_packages():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤"""
    essential_packages = [
        ("pandas>=2.0.0,<3.0.0", "pandas==2.1.4"),
        ("numpy>=1.24.0,<2.0.0", "numpy==1.26.2"),
        ("scikit-learn>=1.3.0,<2.0.0", "scikit-learn==1.3.2"),
        ("flask>=2.3.0,<4.0.0", "flask==3.0.0"),
        ("flask-cors>=4.0.0", "flask-cors==4.0.0"),
        ("matplotlib>=3.7.0,<4.0.0", "matplotlib==3.8.2"),
        ("seaborn>=0.12.0,<1.0.0", "seaborn==0.13.0"),
        ("joblib>=1.3.0,<2.0.0", "joblib==1.3.2"),
        ("requests>=2.31.0,<3.0.0", "requests==2.31.0")
    ]
    
    failed_packages = []
    
    for package, fallback in essential_packages:
        if not install_package_safe(package, fallback):
            failed_packages.append(package)
    
    return failed_packages

def install_optional_packages():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤"""
    optional_packages = [
        ("xgboost>=2.0.0", "xgboost==2.0.3"),
        ("lightgbm>=4.1.0", "lightgbm==4.1.0"),
        ("plotly>=5.15.0", "plotly==5.17.0"),
        ("jupyter>=1.0.0", "jupyter==1.0.0"),
        ("optuna>=3.2.0", "optuna==3.5.0"),
        ("shap>=0.42.0", "shap==0.43.0")
    ]
    
    print("\n=== –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤ ===")
    
    for package, fallback in optional_packages:
        install_package_safe(package, fallback)

def create_project_structure():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞"""
    print("\n=== –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞ ===")
    
    directories = [
        "data",
        "models",
        "api/templates",
        "api/static",
        "frontend/views", 
        "frontend/public",
        "scripts",
        "tests",
        "notebooks/exports"
    ]
    
    for directory in directories:
        Path(directory).mkdir(parents=True, exist_ok=True)
        print(f"üìÅ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {directory}")

def create_gitignore():
    """–°–æ–∑–¥–∞–Ω–∏–µ .gitignore —Ñ–∞–π–ª–∞"""
    gitignore_content = """
# Python
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# Virtual environments
venv/
env/
ENV/
.venv/
.env

# Jupyter Notebook
.ipynb_checkpoints

# Models and data
models/*.pkl
models/*.joblib
data/*.csv
data/processed/
data/raw/

# IDE
.vscode/
.idea/
*.swp
*.swo

# OS
.DS_Store
Thumbs.db

# Logs
*.log
logs/

# Node.js (for frontend)
node_modules/
npm-debug.log*
package-lock.json

# Flask
instance/
.pytest_cache/
"""
    
    with open(".gitignore", "w", encoding="utf-8") as f:
        f.write(gitignore_content.strip())
    
    print("üìù –°–æ–∑–¥–∞–Ω .gitignore —Ñ–∞–π–ª")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    print("üç∑ === –ù–ê–°–¢–†–û–ô–ö–ê –û–ö–†–£–ñ–ï–ù–ò–Ø WINE QUALITY ML ===\n")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python
    python_status = check_python_version()
    
    if python_status == "too_old":
        print("‚ùå –û–±–Ω–æ–≤–∏—Ç–µ Python –¥–æ –≤–µ—Ä—Å–∏–∏ 3.9+ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç —Å–Ω–æ–≤–∞.")
        return
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ pip
    print("\n=== –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ pip ===")
    try:
        subprocess.check_call([sys.executable, "-m", "pip", "install", "--upgrade", "pip"])
        print("‚úÖ pip –æ–±–Ω–æ–≤–ª–µ–Ω")
    except subprocess.CalledProcessError:
        print("‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å pip")
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ setuptools –∏ wheel
    print("\n=== –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–∞–∑–æ–≤—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ ===")
    install_package_safe("setuptools>=65.0.0")
    install_package_safe("wheel>=0.40.0")
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤
    print("\n=== –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤ ===")
    failed = install_essential_packages()
    
    if failed:
        print(f"\n‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å: {', '.join(failed)}")
        print("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏—Ö –≤—Ä—É—á–Ω—É—é –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ requirements-minimal.txt")
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤
    if python_status != "3.13+":
        install_optional_packages()
    else:
        print("\n‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤ –¥–ª—è Python 3.13+")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞
    create_project_structure()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ .gitignore
    create_gitignore()
    
    print("\nüéâ === –ù–ê–°–¢–†–û–ô–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê ===")
    print("\n–î–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞:")
    print("1. –î–æ–±–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ –ø–∞–ø–∫—É data/")
    print("2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python scripts/train_model.py")
    print("3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ API: python api/app.py")
    print("4. –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:5000 –≤ –±—Ä–∞—É–∑–µ—Ä–µ")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤
    print("\n=== –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤ ===")
    required_packages = ['pandas', 'numpy', 'sklearn', 'flask', 'matplotlib']
    
    for package in required_packages:
        try:
            if package == 'sklearn':
                import sklearn
                print(f"‚úÖ scikit-learn: {sklearn.__version__}")
            else:
                version = pkg_resources.get_distribution(package).version
                print(f"‚úÖ {package}: {version}")
        except:
            print(f"‚ùå {package}: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == "__main__":
    main()
